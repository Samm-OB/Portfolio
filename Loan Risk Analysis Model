{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":8173310,"sourceType":"datasetVersion","datasetId":4837622}],"dockerImageVersionId":30732,"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"# IMPORT MODULES/LIBRARIES AND DOWNLOAD DATASET","metadata":{}},{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n# import necessary libraries/modules\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\nwarnings.filterwarnings('ignore')\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-06-05T01:09:04.033578Z","iopub.execute_input":"2024-06-05T01:09:04.033991Z","iopub.status.idle":"2024-06-05T01:09:05.100656Z","shell.execute_reply.started":"2024-06-05T01:09:04.033961Z","shell.execute_reply":"2024-06-05T01:09:05.099330Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# LOAD DATASET","metadata":{}},{"cell_type":"code","source":"#Load dataset\ndataset = pd.read_json('/kaggle/input/loan-approval-dataset/loan_approval_dataset.json')\ndf = dataset.copy()\n\n#display the first n entries\ndf.head()","metadata":{"execution":{"iopub.status.busy":"2024-06-05T01:09:08.722345Z","iopub.execute_input":"2024-06-05T01:09:08.723533Z","iopub.status.idle":"2024-06-05T01:09:12.442738Z","shell.execute_reply.started":"2024-06-05T01:09:08.723496Z","shell.execute_reply":"2024-06-05T01:09:12.441334Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# to display the last 'n' entries\ndf.tail()","metadata":{"execution":{"iopub.status.busy":"2024-06-05T01:09:12.444781Z","iopub.execute_input":"2024-06-05T01:09:12.445844Z","iopub.status.idle":"2024-06-05T01:09:12.465857Z","shell.execute_reply.started":"2024-06-05T01:09:12.445797Z","shell.execute_reply":"2024-06-05T01:09:12.463783Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df.describe()","metadata":{"execution":{"iopub.status.busy":"2024-06-05T01:09:23.231735Z","iopub.execute_input":"2024-06-05T01:09:23.232095Z","iopub.status.idle":"2024-06-05T01:09:23.312758Z","shell.execute_reply.started":"2024-06-05T01:09:23.232069Z","shell.execute_reply":"2024-06-05T01:09:23.311712Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df.info()","metadata":{"execution":{"iopub.status.busy":"2024-06-05T01:09:23.481155Z","iopub.execute_input":"2024-06-05T01:09:23.481560Z","iopub.status.idle":"2024-06-05T01:09:23.583081Z","shell.execute_reply.started":"2024-06-05T01:09:23.481531Z","shell.execute_reply":"2024-06-05T01:09:23.581945Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df.dtypes","metadata":{"execution":{"iopub.status.busy":"2024-06-05T01:09:23.706129Z","iopub.execute_input":"2024-06-05T01:09:23.707065Z","iopub.status.idle":"2024-06-05T01:09:23.714573Z","shell.execute_reply.started":"2024-06-05T01:09:23.707030Z","shell.execute_reply":"2024-06-05T01:09:23.713533Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# to display the columns in the dataset\ndf.columns","metadata":{"execution":{"iopub.status.busy":"2024-06-05T01:09:26.403293Z","iopub.execute_input":"2024-06-05T01:09:26.403643Z","iopub.status.idle":"2024-06-05T01:09:26.410903Z","shell.execute_reply.started":"2024-06-05T01:09:26.403619Z","shell.execute_reply":"2024-06-05T01:09:26.409860Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"**Income**: The salary of the person applying for the loan\n\n**Age**: Age of Person\n\n**Experience**: Years of professional Experience \n\n**Marital status**: Single  or Married\n\n**Profession**: Occupation\n\n**City**: Location(city) of the person\n\n**State**: Loaction(state) of the person","metadata":{}},{"cell_type":"code","source":"df.size","metadata":{"execution":{"iopub.status.busy":"2024-06-05T01:09:26.823550Z","iopub.execute_input":"2024-06-05T01:09:26.823921Z","iopub.status.idle":"2024-06-05T01:09:26.830889Z","shell.execute_reply.started":"2024-06-05T01:09:26.823894Z","shell.execute_reply":"2024-06-05T01:09:26.829718Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# getting the correlation among the following columns\ndf[['Income', 'Age', 'Experience', 'CURRENT_JOB_YRS', 'CURRENT_HOUSE_YRS', 'Risk_Flag']].corr()","metadata":{"execution":{"iopub.status.busy":"2024-06-05T01:09:27.081312Z","iopub.execute_input":"2024-06-05T01:09:27.081683Z","iopub.status.idle":"2024-06-05T01:09:27.136885Z","shell.execute_reply.started":"2024-06-05T01:09:27.081648Z","shell.execute_reply":"2024-06-05T01:09:27.135838Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df['Risk_Flag'].value_counts()","metadata":{"execution":{"iopub.status.busy":"2024-06-05T01:09:28.990088Z","iopub.execute_input":"2024-06-05T01:09:28.990504Z","iopub.status.idle":"2024-06-05T01:09:29.002659Z","shell.execute_reply.started":"2024-06-05T01:09:28.990471Z","shell.execute_reply":"2024-06-05T01:09:29.001432Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"From the above info, the ratio of risk flag 0(i.e no risk) to risk flag 1(i.e there is risk) is small. this means that the data is unbalanced which may lead to a form of biased prediction from the model because there are morse cases where there are no risks","metadata":{}},{"cell_type":"code","source":"df[df['Risk_Flag'] == 1].head(6)","metadata":{"execution":{"iopub.status.busy":"2024-06-05T01:09:30.673340Z","iopub.execute_input":"2024-06-05T01:09:30.673716Z","iopub.status.idle":"2024-06-05T01:09:30.701009Z","shell.execute_reply.started":"2024-06-05T01:09:30.673690Z","shell.execute_reply":"2024-06-05T01:09:30.699792Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df[df['Risk_Flag'] == 0].head(6)","metadata":{"execution":{"iopub.status.busy":"2024-06-05T01:09:30.884459Z","iopub.execute_input":"2024-06-05T01:09:30.884850Z","iopub.status.idle":"2024-06-05T01:09:30.932081Z","shell.execute_reply.started":"2024-06-05T01:09:30.884818Z","shell.execute_reply":"2024-06-05T01:09:30.931075Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df['House_Ownership'].value_counts()","metadata":{"execution":{"iopub.status.busy":"2024-06-05T01:09:31.108802Z","iopub.execute_input":"2024-06-05T01:09:31.109192Z","iopub.status.idle":"2024-06-05T01:09:31.144180Z","shell.execute_reply.started":"2024-06-05T01:09:31.109163Z","shell.execute_reply":"2024-06-05T01:09:31.142859Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df['Married/Single'].value_counts()","metadata":{"execution":{"iopub.status.busy":"2024-06-05T01:09:32.411325Z","iopub.execute_input":"2024-06-05T01:09:32.411711Z","iopub.status.idle":"2024-06-05T01:09:32.449267Z","shell.execute_reply.started":"2024-06-05T01:09:32.411675Z","shell.execute_reply":"2024-06-05T01:09:32.447856Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df[df['Married/Single'] == 'single'].head(6)","metadata":{"execution":{"iopub.status.busy":"2024-06-05T01:09:32.831453Z","iopub.execute_input":"2024-06-05T01:09:32.832326Z","iopub.status.idle":"2024-06-05T01:09:32.908992Z","shell.execute_reply.started":"2024-06-05T01:09:32.832286Z","shell.execute_reply":"2024-06-05T01:09:32.907961Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df[df['Married/Single'] == 'married'].head(6)","metadata":{"execution":{"iopub.status.busy":"2024-06-05T01:09:33.019353Z","iopub.execute_input":"2024-06-05T01:09:33.019791Z","iopub.status.idle":"2024-06-05T01:09:33.064200Z","shell.execute_reply.started":"2024-06-05T01:09:33.019761Z","shell.execute_reply":"2024-06-05T01:09:33.063132Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# no of (rows, columns)\ndf.shape","metadata":{"execution":{"iopub.status.busy":"2024-06-05T01:09:34.811336Z","iopub.execute_input":"2024-06-05T01:09:34.811724Z","iopub.status.idle":"2024-06-05T01:09:34.818556Z","shell.execute_reply.started":"2024-06-05T01:09:34.811695Z","shell.execute_reply":"2024-06-05T01:09:34.817414Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Check for null entries and return the amount of null entries in each column\ndf.isnull().sum()","metadata":{"execution":{"iopub.status.busy":"2024-06-05T01:09:35.233817Z","iopub.execute_input":"2024-06-05T01:09:35.234185Z","iopub.status.idle":"2024-06-05T01:09:35.322678Z","shell.execute_reply.started":"2024-06-05T01:09:35.234157Z","shell.execute_reply":"2024-06-05T01:09:35.321645Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# check for duplicate entries\ndf.duplicated().sum()","metadata":{"execution":{"iopub.status.busy":"2024-06-05T01:09:35.472281Z","iopub.execute_input":"2024-06-05T01:09:35.472666Z","iopub.status.idle":"2024-06-05T01:09:35.677429Z","shell.execute_reply.started":"2024-06-05T01:09:35.472635Z","shell.execute_reply":"2024-06-05T01:09:35.676229Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"This means there are no duplicate values or rows that do not have values assigned to them \nso we can say that the dataset is clean","metadata":{}},{"cell_type":"markdown","source":"# Exploratory Data Analysis/ Data Visualistion ","metadata":{}},{"cell_type":"code","source":"plt.figure(figsize=(15, 20))\n\nax = sns.countplot(y= df['Profession'], palette=\"Blues\")\nplt.title(\"Frequency of each Profession\")\nplt.xlabel(\"No of times Profession occured\")\nplt.ylabel(\"Profession\")\n\n\nfor container in ax.containers:\n    ax.bar_label(container)\n\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-06-05T01:09:38.134265Z","iopub.execute_input":"2024-06-05T01:09:38.135285Z","iopub.status.idle":"2024-06-05T01:09:39.431735Z","shell.execute_reply.started":"2024-06-05T01:09:38.135224Z","shell.execute_reply":"2024-06-05T01:09:39.430527Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"plt.figure(figsize=(5, 6))\n\nhue_order = ['first', 'second']\nsns.boxplot(y= df['Married/Single'], x=df['Age'], palette=\"Greens\", hue_order=hue_order)\n\n\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-06-05T01:09:39.433584Z","iopub.execute_input":"2024-06-05T01:09:39.433927Z","iopub.status.idle":"2024-06-05T01:09:39.755522Z","shell.execute_reply.started":"2024-06-05T01:09:39.433896Z","shell.execute_reply":"2024-06-05T01:09:39.754454Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"sns.countplot(x=df['Risk_Flag'], palette=\"Greens\")\nplt.title(\"Unbalanced Dataset\")\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-06-05T01:09:39.756897Z","iopub.execute_input":"2024-06-05T01:09:39.757306Z","iopub.status.idle":"2024-06-05T01:09:39.964486Z","shell.execute_reply.started":"2024-06-05T01:09:39.757269Z","shell.execute_reply":"2024-06-05T01:09:39.963423Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"fig, ax = plt.subplots(figsize=(10, 6))\n\n# Scatter plot\nsns.histplot(data = df[df['Risk_Flag']==1], x=df['Income'], palette=\"coolwarm\", hue=df[\"Married/Single\"], ax=ax)\n\n# Show the plot\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-06-05T01:09:39.966873Z","iopub.execute_input":"2024-06-05T01:09:39.967311Z","iopub.status.idle":"2024-06-05T01:09:40.976994Z","shell.execute_reply.started":"2024-06-05T01:09:39.967274Z","shell.execute_reply":"2024-06-05T01:09:40.975853Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"fig, ax = plt.subplots(figsize=(10, 6))\n\n# Scatter plot\nsns.histplot(data = df[df['Risk_Flag']==1], x=df['CURRENT_JOB_YRS'], palette=\"coolwarm\", hue=df[\"Married/Single\"], ax=ax)\n\n# Show the plot\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-06-05T01:09:46.823435Z","iopub.execute_input":"2024-06-05T01:09:46.823882Z","iopub.status.idle":"2024-06-05T01:09:47.809398Z","shell.execute_reply.started":"2024-06-05T01:09:46.823849Z","shell.execute_reply":"2024-06-05T01:09:47.808217Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df.columns","metadata":{"execution":{"iopub.status.busy":"2024-06-05T01:09:47.811634Z","iopub.execute_input":"2024-06-05T01:09:47.812067Z","iopub.status.idle":"2024-06-05T01:09:47.819769Z","shell.execute_reply.started":"2024-06-05T01:09:47.812031Z","shell.execute_reply":"2024-06-05T01:09:47.818760Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df.dtypes","metadata":{"execution":{"iopub.status.busy":"2024-06-05T01:09:47.821104Z","iopub.execute_input":"2024-06-05T01:09:47.821449Z","iopub.status.idle":"2024-06-05T01:09:47.831321Z","shell.execute_reply.started":"2024-06-05T01:09:47.821423Z","shell.execute_reply":"2024-06-05T01:09:47.830330Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"corr_mat = df.corr(numeric_only=True)\n\nsns.heatmap(corr_mat, annot=True, cmap=sns.color_palette(\"Greens\", as_cmap=True), cbar=True, fmt='.2f', square=True)\nplt.title(\"Correlation plot\")\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-06-05T01:09:53.112306Z","iopub.execute_input":"2024-06-05T01:09:53.112683Z","iopub.status.idle":"2024-06-05T01:09:53.686538Z","shell.execute_reply.started":"2024-06-05T01:09:53.112658Z","shell.execute_reply":"2024-06-05T01:09:53.685505Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# FEATURE EXTRACTION/SELECTION","metadata":{}},{"cell_type":"code","source":"new_df = df\nnew_df['Married/Single'] = new_df['Married/Single'].map({'single': 0, 'married': 1})","metadata":{"execution":{"iopub.status.busy":"2024-06-05T01:09:53.688576Z","iopub.execute_input":"2024-06-05T01:09:53.689367Z","iopub.status.idle":"2024-06-05T01:09:53.713996Z","shell.execute_reply.started":"2024-06-05T01:09:53.689329Z","shell.execute_reply":"2024-06-05T01:09:53.712935Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"new_df['House_Ownership'].unique()","metadata":{"execution":{"iopub.status.busy":"2024-06-05T01:09:59.611227Z","iopub.execute_input":"2024-06-05T01:09:59.611644Z","iopub.status.idle":"2024-06-05T01:09:59.637887Z","shell.execute_reply.started":"2024-06-05T01:09:59.611614Z","shell.execute_reply":"2024-06-05T01:09:59.636763Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"new_df['House_Ownership'] = new_df['House_Ownership'].map({'rented': 0, 'owned': 1, 'norent_noown':2})","metadata":{"execution":{"iopub.status.busy":"2024-06-05T01:09:59.781229Z","iopub.execute_input":"2024-06-05T01:09:59.781694Z","iopub.status.idle":"2024-06-05T01:09:59.807582Z","shell.execute_reply.started":"2024-06-05T01:09:59.781652Z","shell.execute_reply":"2024-06-05T01:09:59.806354Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"new_df.head()","metadata":{"execution":{"iopub.status.busy":"2024-06-05T01:10:00.023174Z","iopub.execute_input":"2024-06-05T01:10:00.024144Z","iopub.status.idle":"2024-06-05T01:10:00.038368Z","shell.execute_reply.started":"2024-06-05T01:10:00.024108Z","shell.execute_reply":"2024-06-05T01:10:00.037258Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"new_df['Car_Ownership'].unique()","metadata":{"execution":{"iopub.status.busy":"2024-06-05T01:10:00.251482Z","iopub.execute_input":"2024-06-05T01:10:00.252625Z","iopub.status.idle":"2024-06-05T01:10:00.279765Z","shell.execute_reply.started":"2024-06-05T01:10:00.252587Z","shell.execute_reply":"2024-06-05T01:10:00.278216Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"new_df['Car_Ownership'] = new_df['Car_Ownership'].map({'no': 0, 'yes': 1})","metadata":{"execution":{"iopub.status.busy":"2024-06-05T01:10:01.811117Z","iopub.execute_input":"2024-06-05T01:10:01.811522Z","iopub.status.idle":"2024-06-05T01:10:01.841030Z","shell.execute_reply.started":"2024-06-05T01:10:01.811492Z","shell.execute_reply":"2024-06-05T01:10:01.839678Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"new_df.head()","metadata":{"execution":{"iopub.status.busy":"2024-06-05T01:10:02.243347Z","iopub.execute_input":"2024-06-05T01:10:02.244666Z","iopub.status.idle":"2024-06-05T01:10:02.260510Z","shell.execute_reply.started":"2024-06-05T01:10:02.244616Z","shell.execute_reply":"2024-06-05T01:10:02.259086Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"categorical_cols = ['Married/Single','House_Ownership','Car_Ownership',\n                    'CURRENT_JOB_YRS', 'CURRENT_HOUSE_YRS','Risk_Flag']\n\nfor col in categorical_cols:\n    print(df[col].value_counts(), '\\n')","metadata":{"execution":{"iopub.status.busy":"2024-06-05T01:10:02.439514Z","iopub.execute_input":"2024-06-05T01:10:02.439905Z","iopub.status.idle":"2024-06-05T01:10:02.472289Z","shell.execute_reply.started":"2024-06-05T01:10:02.439875Z","shell.execute_reply":"2024-06-05T01:10:02.470751Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#removing columns that won't be needed to train and test model\nnew_df = new_df.drop(['Profession'], axis=1)\nnew_df = new_df.drop(['CITY'], axis=1)\nnew_df = new_df.drop(['STATE'], axis=1)\nnew_df","metadata":{"execution":{"iopub.status.busy":"2024-06-05T01:10:04.914411Z","iopub.execute_input":"2024-06-05T01:10:04.914809Z","iopub.status.idle":"2024-06-05T01:10:04.969504Z","shell.execute_reply.started":"2024-06-05T01:10:04.914777Z","shell.execute_reply":"2024-06-05T01:10:04.968314Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"new_df = new_df.drop(['Id'], axis=1)\nnew_df","metadata":{"execution":{"iopub.status.busy":"2024-06-05T01:10:05.124377Z","iopub.execute_input":"2024-06-05T01:10:05.124776Z","iopub.status.idle":"2024-06-05T01:10:05.144195Z","shell.execute_reply.started":"2024-06-05T01:10:05.124747Z","shell.execute_reply":"2024-06-05T01:10:05.143057Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Splitting Dataset into Features(X) and Labels(y)","metadata":{}},{"cell_type":"code","source":"X = new_df.drop(['Risk_Flag'], axis=1)\ny = new_df['Risk_Flag']","metadata":{"execution":{"iopub.status.busy":"2024-06-05T01:10:06.428569Z","iopub.execute_input":"2024-06-05T01:10:06.428985Z","iopub.status.idle":"2024-06-05T01:10:06.443384Z","shell.execute_reply.started":"2024-06-05T01:10:06.428954Z","shell.execute_reply":"2024-06-05T01:10:06.442022Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# BALANCING THE DATASET","metadata":{}},{"cell_type":"code","source":"from imblearn.over_sampling import RandomOverSampler\nros = RandomOverSampler(random_state=0)\nX, y = ros.fit_resample(X, y)\n\n# Visualize the new balance\nsns.countplot(x=y, palette='winter')\nplt.show()\n","metadata":{"execution":{"iopub.status.busy":"2024-06-05T01:10:09.294073Z","iopub.execute_input":"2024-06-05T01:10:09.294470Z","iopub.status.idle":"2024-06-05T01:10:10.144313Z","shell.execute_reply.started":"2024-06-05T01:10:09.294438Z","shell.execute_reply":"2024-06-05T01:10:10.143171Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from sklearn.model_selection import train_test_split as tts\ntrain_X, test_X, train_Y, test_Y = tts(X, y, random_state=0, test_size=0.2, stratify=None)","metadata":{"execution":{"iopub.status.busy":"2024-06-05T01:10:11.929638Z","iopub.execute_input":"2024-06-05T01:10:11.930518Z","iopub.status.idle":"2024-06-05T01:10:12.020127Z","shell.execute_reply.started":"2024-06-05T01:10:11.930482Z","shell.execute_reply":"2024-06-05T01:10:12.018823Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"print(\"shape of train_new_dfX: \", train_X.shape)\nprint(\"shape of test_new_dfX: \", test_X.shape)\nprint(\"shape of train_new_dfY: \", train_Y.shape)\nprint(\"shape of test_new_dfX: \", test_Y.shape)","metadata":{"execution":{"iopub.status.busy":"2024-06-05T01:10:13.083153Z","iopub.execute_input":"2024-06-05T01:10:13.083572Z","iopub.status.idle":"2024-06-05T01:10:13.089995Z","shell.execute_reply.started":"2024-06-05T01:10:13.083538Z","shell.execute_reply":"2024-06-05T01:10:13.088787Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from sklearn.model_selection import train_test_split as tts\ntrain_x, val_x, train_y, val_y = tts(train_X, train_Y, test_size=0.2, random_state=0, stratify=None)","metadata":{"execution":{"iopub.status.busy":"2024-06-05T01:10:13.236590Z","iopub.execute_input":"2024-06-05T01:10:13.237001Z","iopub.status.idle":"2024-06-05T01:10:13.325392Z","shell.execute_reply.started":"2024-06-05T01:10:13.236967Z","shell.execute_reply":"2024-06-05T01:10:13.324384Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"print(\"shape of training set: \", train_x.shape, train_y.shape)\n\nprint(\"shape of validation set: \", val_x.shape, val_y.shape)\n\nprint(\"shape of test set: \", test_X.shape, test_Y.shape)","metadata":{"execution":{"iopub.status.busy":"2024-06-05T01:10:15.896302Z","iopub.execute_input":"2024-06-05T01:10:15.897348Z","iopub.status.idle":"2024-06-05T01:10:15.903281Z","shell.execute_reply.started":"2024-06-05T01:10:15.897302Z","shell.execute_reply":"2024-06-05T01:10:15.902005Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"train_y.value_counts()/ len(train_y)","metadata":{"execution":{"iopub.status.busy":"2024-06-05T01:10:16.286255Z","iopub.execute_input":"2024-06-05T01:10:16.286683Z","iopub.status.idle":"2024-06-05T01:10:16.299005Z","shell.execute_reply.started":"2024-06-05T01:10:16.286649Z","shell.execute_reply":"2024-06-05T01:10:16.297387Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"val_y.value_counts()/ len(val_y)","metadata":{"execution":{"iopub.status.busy":"2024-06-05T01:10:16.470650Z","iopub.execute_input":"2024-06-05T01:10:16.471455Z","iopub.status.idle":"2024-06-05T01:10:16.480158Z","shell.execute_reply.started":"2024-06-05T01:10:16.471422Z","shell.execute_reply":"2024-06-05T01:10:16.479117Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"train_Y.value_counts()/ len(train_Y)","metadata":{"execution":{"iopub.status.busy":"2024-06-05T01:10:16.641085Z","iopub.execute_input":"2024-06-05T01:10:16.641488Z","iopub.status.idle":"2024-06-05T01:10:16.653439Z","shell.execute_reply.started":"2024-06-05T01:10:16.641457Z","shell.execute_reply":"2024-06-05T01:10:16.652224Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from sklearn.model_selection import train_test_split as tts\ntrain_X, test_X, train_Y, test_Y = tts(X, y, random_state=0, test_size=0.2, stratify=y)","metadata":{"execution":{"iopub.status.busy":"2024-06-05T01:10:19.343421Z","iopub.execute_input":"2024-06-05T01:10:19.343831Z","iopub.status.idle":"2024-06-05T01:10:19.562308Z","shell.execute_reply.started":"2024-06-05T01:10:19.343802Z","shell.execute_reply":"2024-06-05T01:10:19.561167Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from sklearn.model_selection import train_test_split as tts\ntrain_x, val_x, train_y, val_y = tts(train_X, train_Y, test_size=0.2, random_state=0, stratify=train_Y)","metadata":{"execution":{"iopub.status.busy":"2024-06-05T01:10:19.570421Z","iopub.execute_input":"2024-06-05T01:10:19.570810Z","iopub.status.idle":"2024-06-05T01:10:19.734501Z","shell.execute_reply.started":"2024-06-05T01:10:19.570779Z","shell.execute_reply":"2024-06-05T01:10:19.733399Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"print(\"shape of training set: \", train_x.shape, train_y.shape)\n\nprint(\"shape of validation set: \", val_x.shape, val_y.shape)\n\nprint(\"shape of test set: \", test_X.shape, test_Y.shape)","metadata":{"execution":{"iopub.status.busy":"2024-06-05T01:10:23.146443Z","iopub.execute_input":"2024-06-05T01:10:23.146853Z","iopub.status.idle":"2024-06-05T01:10:23.152913Z","shell.execute_reply.started":"2024-06-05T01:10:23.146820Z","shell.execute_reply":"2024-06-05T01:10:23.151853Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"train_y.value_counts()/ len(train_y)","metadata":{"execution":{"iopub.status.busy":"2024-06-05T01:10:23.294409Z","iopub.execute_input":"2024-06-05T01:10:23.295530Z","iopub.status.idle":"2024-06-05T01:10:23.306619Z","shell.execute_reply.started":"2024-06-05T01:10:23.295492Z","shell.execute_reply":"2024-06-05T01:10:23.305525Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"val_y.value_counts()/ len(val_y)","metadata":{"execution":{"iopub.status.busy":"2024-06-05T01:10:23.460297Z","iopub.execute_input":"2024-06-05T01:10:23.460730Z","iopub.status.idle":"2024-06-05T01:10:23.469773Z","shell.execute_reply.started":"2024-06-05T01:10:23.460699Z","shell.execute_reply":"2024-06-05T01:10:23.468782Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"train_Y.value_counts()/ len(train_Y)","metadata":{"execution":{"iopub.status.busy":"2024-06-05T01:10:25.813105Z","iopub.execute_input":"2024-06-05T01:10:25.813497Z","iopub.status.idle":"2024-06-05T01:10:25.826003Z","shell.execute_reply.started":"2024-06-05T01:10:25.813469Z","shell.execute_reply":"2024-06-05T01:10:25.824811Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\ntrain_x_scale = scaler.fit_transform(train_x)\ntest_x_scale = scaler.fit_transform(test_X)\nprint(train_x_scale.shape, test_x_scale.shape, train_y.shape, test_Y.shape)","metadata":{"execution":{"iopub.status.busy":"2024-06-05T01:10:26.045207Z","iopub.execute_input":"2024-06-05T01:10:26.045639Z","iopub.status.idle":"2024-06-05T01:10:26.109558Z","shell.execute_reply.started":"2024-06-05T01:10:26.045599Z","shell.execute_reply":"2024-06-05T01:10:26.108323Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from sklearn.model_selection import GridSearchCV\nfrom sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, roc_auc_score\nfrom sklearn.metrics import classification_report, confusion_matrix\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.linear_model import LogisticRegression\n\n\ndef fit_and_evalModel(model):\n    model.fit(train_x_scale, train_y)\n    \n    y_pred = model.predict(test_x_scale)\n    \n    accuracy = accuracy_score(test_Y, y_pred)\n    precision = precision_score(test_Y, y_pred)\n    recall = recall_score(test_Y, y_pred)\n    f1 = f1_score(test_Y, y_pred)\n    roc_score = roc_auc_score(test_Y, y_pred)\n    \n    if model.__class__.__name__ != 'GridSearchCV':\n        print('\\nClassification Report:\\n', classification_report(test_Y, y_pred))\n        \n    confuse_mat =  confusion_matrix(test_Y, y_pred)\n    \n    plt.figure(figsize=(5, 5))\n    sns.heatmap(confuse_mat, annot=True, cmap=\"coolwarm\")\n    plt.title(f\"Confusion Matrix Visualization with heatmap for: {model.__class__.__name__}\")\n    plt.xlabel(\"Values Predicted\")\n    plt.ylabel(\"Real Values\")\n    plt.show()\n    \n    accuracy = round((accuracy * 100), 2)\n    \n    return model, accuracy","metadata":{"execution":{"iopub.status.busy":"2024-06-05T01:10:26.175353Z","iopub.execute_input":"2024-06-05T01:10:26.176100Z","iopub.status.idle":"2024-06-05T01:10:26.185766Z","shell.execute_reply.started":"2024-06-05T01:10:26.176063Z","shell.execute_reply":"2024-06-05T01:10:26.184678Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"algos = {\n    'lr': LogisticRegression(random_state = 0, max_iter=500),\n    'rfc': RandomForestClassifier(random_state = 0),\n    #'svc': SVC(random_state = 0)\n}\n\nclassifiers = {}\naccuracies = {}\n\nfor algo in algos:\n    classifiers[algo], accuracies[algo], = fit_and_evalModel(algos[algo])\n    \n    if algo != 'svc':\n        pass","metadata":{"execution":{"iopub.status.busy":"2024-06-05T01:10:32.783436Z","iopub.execute_input":"2024-06-05T01:10:32.783827Z","iopub.status.idle":"2024-06-05T01:11:18.498565Z","shell.execute_reply.started":"2024-06-05T01:10:32.783797Z","shell.execute_reply":"2024-06-05T01:11:18.497325Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"labels = [clf.__class__.__name__ for clf in classifiers.values()]\nvalues = accuracies.values()\n\nlabel_colors = ['green', 'blue']\nbar_colors = ['tab:green', 'tab:blue']\n\nfig, ax = plt.subplots(figsize=(10, 5))\n\nbars = ax.bar(labels, values, label=label_colors, color=bar_colors)\n\nax.set_xlabel('Algorithm used for model')\nax.set_ylabel('Accuracy')\nax.set_title('Algorithm Accuracies')\nax.legend(title= 'Algorithm Accurracies', labels=labels, loc=\"upper left\" )\n\nfor bar in bars:\n    pos_x = bar.get_x() + bar.get_width() / 2.0\n    pos_y = bar.get_height()\n    str = f'{pos_y:.2f}%'\n    plt.text(pos_x, pos_y, str, ha='center', va='bottom')\n\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-06-05T01:11:26.785440Z","iopub.execute_input":"2024-06-05T01:11:26.785844Z","iopub.status.idle":"2024-06-05T01:11:26.998299Z","shell.execute_reply.started":"2024-06-05T01:11:26.785814Z","shell.execute_reply":"2024-06-05T01:11:26.997086Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"From the visualization, The Random Forest Classifier Algorithm gives better accuracy.","metadata":{}},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}